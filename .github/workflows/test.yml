name: Test Environment Setup

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test-environment:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.12']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        python-version: ${{ matrix.python-version }}

    - name: Initialize conda
      shell: bash -l {0}
      run: |
        conda init bash
        conda --version
        conda info

    - name: Cache conda environment
      uses: actions/cache@v4
      with:
        path: |
          ${{ env.CONDA }}/envs
          ${{ env.CONDA }}/pkgs
        key: conda-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('env.yml', 'requirements.txt') }}
        restore-keys: |
          conda-${{ runner.os }}-${{ matrix.python-version }}-

    - name: Create conda environment from env.yml
      shell: bash -l {0}
      run: |
        if conda env list | grep -q "ftw-tutorial"; then
          echo "Environment ftw-tutorial already exists, updating..."
          conda env update -f env.yml
        else
          echo "Creating new environment ftw-tutorial..."
          conda env create -f env.yml
        fi
        conda activate ftw-tutorial
        conda info --envs

    - name: Install pip requirements
      shell: bash -l {0}
      run: |
        conda activate ftw-tutorial
        echo "Installing pip requirements..."
        pip install -r requirements.txt
        pip list | grep ftw

    - name: Verify installation
      shell: bash -l {0}
      env:
        KMP_DUPLICATE_LIB_OK: TRUE
      run: |
        conda activate ftw-tutorial
        python --version
        echo "Testing ftw CLI command..."
        ftw --help || echo "ftw command not found"
        python -c "import geopandas; print('geopandas version:', geopandas.__version__)"
        python -c "import leafmap; print('leafmap version:', leafmap.__version__)"
        python -c "import rasterio; print('rasterio version:', rasterio.__version__)"
        python -c "import torchgeo; print('torchgeo version:', torchgeo.__version__)"
        python -c "import torch; print('PyTorch version:', torch.__version__)"

    - name: Test notebook execution
      shell: bash -l {0}
      env:
        KMP_DUPLICATE_LIB_OK: TRUE
      run: |
        conda activate ftw-tutorial
        python -c "import nbformat; print('nbformat available')"
        python -c "import jupyter; print('jupyter available')"
        echo "Testing notebook execution..."
        jupyter nbconvert --to notebook --execute 1.0-agriculture-monitoring-with-ftw.ipynb --output-dir /tmp --allow-errors
